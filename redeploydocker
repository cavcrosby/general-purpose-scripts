#!/bin/bash
#
# Used to redeploy (a) docker container on a machine.
# Ideally this script will be ran as a cron job.

# NOTE: no set -e because if lots of commands then
# I'd wish to know if more than one failed
# instead of one at a time (especially in the post deployment commands)

PROGRAM_NAME="$(basename "$0")"
# this is the default registry
DOCKER_REGISTRY_URL="docker.io"
# <name>:<tag> format, excluding docker registry from name
# NOTE: this tag should denote the "latest" tag,
# whatever that means to you!
DOCKER_CONTAINER_TAG=""
FULL_DOCKER_CONTAINER_TAG="${DOCKER_REGISTRY_URL}/${DOCKER_CONTAINER_TAG}"
running_post_deployment_cmds_nonsuccessful=
POST_DEPLOYMENT_COMMANDS=(
    # these should be strs to run after deploying the docker container, e.g.
    # java -jar agent.jar -jnlpUrl http://localhost:8080/computer/foo-host/jenkins-agent.jnlp -secret thefoo -workDir "/var/lib/jenkins-nodes/foo-host"
)

docker_deploy () {
    # NOTE: this is to be defined where it is needed
    # by default this should tell the user this was never configured!
    echo "${PROGRAM_NAME}: the actual redeploying of container was not defined"
    return 1
}

if [ -z "$(which docker)" ]; then
    echo "${PROGRAM_NAME}: docker cannot be found on the PATH!"
    exit 1
fi

if ! docker pull "$FULL_DOCKER_CONTAINER_TAG"; then
    # the message that errors out with docker is good enough
    exit 1
fi

if ! docker_deploy; then
    echo "${PROGRAM_NAME}: redeploying the container failed"
    exit 1
fi

# shellcheck disable=2181
for cmd in "${POST_DEPLOYMENT_COMMANDS[@]}"; do
    # NOTE: some commands might need to run in the background,
    # this is defined on a per cmd basis
    # TODO(conner@conneracrosby.tech): why not just use 'if ! $?; then ...'
    # TODO(conner@conneracrosby.tech): there maybe a better way to signal nonsuccessful post cmds ran?
    "${cmd[@]}"
    if [ "$?" -ne 0 ]; then
        running_post_deployment_cmds_nonsuccessful="true"
    fi
done

echo "${PROGRAM_NAME}: redeploying the container was successful"

if [ -n "$running_post_deployment_cmds_nonsuccessful" ]; then
    echo "${PROGRAM_NAME}: running post deployment commands were NOT successful!"
    exit 1
fi

echo "${PROGRAM_NAME}: running post deployment commands were successful!"
exit 0
