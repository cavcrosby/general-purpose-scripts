#!/bin/sh
#
# My attempt in creating something similar to Python's
# os.path.join (and any other language's variation of this).

#######################################
# Used to join together 'file' entries into
# a path on the file system.
# Arguments:
#   $n: file(s) to concatenate into a filesystem
#   path
# Outputs:
#   - Writes fully functional command line interface to stdout
#   - Writes conjoined file entries to stdout
# Returns:
#   - 0: success
#   - 0: usage string was requested
#   - 1: 0 arguments were passed to the command
#######################################
pathjoin() {
    # constants and defined cli parameters, opt ==> option
    readonly PROGRAM_NAME="pathjoin"
    readonly FALSE=0
    readonly TRUE=1
    readonly HELP_SHORT_OPT="h"
    readonly HELP_LONG_OPT="help"
    readonly RELATIVE_PATH_SHORT_OPT="r"
    readonly RELATIVE_PATH_LONG_OPT="relative-path"
    # combining all short opts to form shortopts for getopt
    readonly short_opts="${HELP_SHORT_OPT}"\
"${RELATIVE_PATH_SHORT_OPT}"

    path_prefix="/"
    help_option="${FALSE}"
    # do not combine long opts into their own variable
    eval set -- "$(getopt --options "${short_opts}" --long "${HELP_LONG_OPT}","${RELATIVE_PATH_LONG_OPT}" --name "${PROGRAM_NAME}" -- "$@")"
    while true; do
        case "$1" in
            "-${HELP_SHORT_OPT}" | "--${HELP_LONG_OPT}")                        help_option="${TRUE}"; shift ;;
            "-${RELATIVE_PATH_SHORT_OPT}" | "--${RELATIVE_PATH_LONG_OPT}")      path_prefix="./"; shift ;;
            "--")                                                               shift; break ;;
            *)                                                                  break ;;
        esac
    done

    # for reference why ((...)) was not used:
    # https://github.com/koalaman/shellcheck/wiki/SC3006
    if [ $# -eq 0 ] || [ "${help_option}" -gt 0 ]; then
        cat << _EOF_
Usage: ${PROGRAM_NAME} [-${HELP_SHORT_OPT}] [-${RELATIVE_PATH_SHORT_OPT}] [PATH...]

Takes one or more filesystem paths and conjoins them. Duplicate
forward slashes (e.g. $PROGRAM_NAME foo/ /bar, /foo/bar would be 
the result) are accounted for. By default, an absolute path is 
assumed, but this can be overwritten.

Options:
    -${HELP_SHORT_OPT}, --${HELP_LONG_OPT}             show this help message and exit
    -${RELATIVE_PATH_SHORT_OPT}, --${RELATIVE_PATH_LONG_OPT}    a relative path is constructed over an absolute path

_EOF_
        if [ $# -eq 0 ]; then
            return 1
        fi
        return 0
    fi

    completed_path="${path_prefix}"
    while [ $# -gt 0 ]; do
        # arg ==> argument
        arg="$1"
        # Subtract 2 is needed to deal with newline from echo, sh doesn't understand
        # flags to echo...apparently, and to deal with getting right end index.
        completed_path_end=$(( $(echo "${completed_path}" | wc --chars) - 2 ))
        if [ "${#completed_path}" -eq 1 ] && [ "${arg}" = '/' ]; then
            # Don't do anything, ignore the '/' inserted as an argument.
            arg=
        elif [ "${#completed_path}" -eq 1 ] \
            && [ "$(expr "${arg}" : ".\{0,0\}\(.\{0,1\}\)")" != '/' ]; then
            # If this will be the first path to be added to the completed_path and if the
            # directory separator is NOT the first character of the arg. Don't do anything,
            # as this is the first part of the completed path.
            :
        # sh version of ${string:position:length}, inspired by:
        # https://mywiki.wooledge.org/Bashism
        # $(expr "x$name" : "x.\{0,$n\}\(.\{0,$l\}\)")
        elif [ "$(expr "${completed_path}" : ".\{0,${completed_path_end}\}\(.\{0,1\}\)")" != '/' ] \
            && [ "$(expr "${arg}" : ".\{0,0\}\(.\{0,1\}\)")" != '/' ]; then
            # Looking to see if the directory separator is not the last character of the
            # completed_path and is not the first character of the arg.
            arg="/${arg}"
        elif [ "$(expr "${completed_path}" : ".\{0,${completed_path_end}\}\(.\{0,1\}\)")" = '/' ] \
            && [ "$(expr "${arg}" : ".\{0,0\}\(.\{0,1\}\)")" = '/' ]; then
            # Looking to see if the directory separator is the last character of the
            # completed_path and is the first character of the arg.
            arg="$(expr "${arg}" : ".\{0,1\}\(.\{0,$(( $(echo "${arg}" | wc --chars) - 2 ))\}\)")"
        fi
        completed_path="${completed_path}${arg}"
        shift
    done

    echo "${completed_path}"
    return 0
}

# Are we executing the script (rather than sourcing it)?
# Inspired by: https://superuser.com/questions/731425/bash-detect-execute-vs-source-in-a-script
# shellcheck disable=2116
if [ "$(basename "$0")" = "pathjoin" ]; then
    pathjoin "$@"
    exit
fi
