#!/bin/bash
#
# Deletes non-bare git repo(s) from the filesystem and then grabs another copy
# each from its 'origin' location.

set -e

# constants and defined cli parameters
PROGRAM_NAME="$(basename "$0")"
readonly PROGRAM_NAME
readonly FALSE=0
readonly TRUE=1
readonly HELP_SHORT_OPT="h"
readonly HELP_LONG_OPT="help"
# combining all short opts to form shortopts for getopt
readonly short_opts="${HELP_SHORT_OPT}"

help_option="${FALSE}"
# do not combine long opts into their own variable
eval set -- "$(getopt --options "${short_opts}" --long "${HELP_LONG_OPT}" --name "${PROGRAM_NAME}" -- "$@")"

# determine behavior of program from cli arguments
while true; do
    case "$1" in
        "-${HELP_SHORT_OPT}" | "--${HELP_LONG_OPT}")    help_option="${TRUE}"; shift ;;
        "--")                                           shift; break ;;
        *)                                              break ;;
    esac
done

if [ $# -eq 0 ] || (( help_option )); then
        cat << _EOF_
Usage: ${PROGRAM_NAME} [-${HELP_SHORT_OPT}] GIT_REPO_DIR...

Deletes non-bare git repo(s) from the filesystem and then grabs another copy
each from its 'origin' location.

Options:
    -${HELP_SHORT_OPT}, --${HELP_LONG_OPT}      show this help message and exit

_EOF_
    if [ $# -eq 0 ]; then
        exit 1
    fi
    exit 0
fi

if [ -z "$(command -v git)" ]; then
	echo "${PROGRAM_NAME}: git cannot be found in the PATH!" >&2
	exit 1
fi

while [ $# -gt 0 ]; do
    git_repo_dir="$1"
    cd "${git_repo_dir}"
    if ! git rev-parse --quiet --is-inside-work-tree > /dev/null 2>&1; then
        echo -e "${PROGRAM_NAME}: ${git_repo_dir} is not a git repo!" >&2
        cd - > /dev/null
        exit
    fi
    git_repo_url="$(git config --local remote.origin.url)"
    cd - > /dev/null
    rm --recursive --force "${git_repo_dir}"
    git clone --quiet "${git_repo_url}" "$(basename "${git_repo_dir}")"
    shift
done

exit 0
