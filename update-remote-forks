#!/bin/bash
# Script used to handle the updating of remote repos
# that I have forked. All branches and tags are updated
# on the remote repo from the upstream (or original repo).
getopts "v" opt

case "$opt" in
    # -v is for verbose (applies mostly to git here), but in 
    # this case it also prints commands and their arguments as they execute
    "v")    set -ex
            GIT_CLONE=( git clone --verbose )
            GIT_BRANCH=( git branch --verbose )
            GIT_PUSH=( git push --verbose )
            ;;
    *)      set -e
            GIT_CLONE=( git clone --quiet )
            GIT_BRANCH=( git branch --quiet )
            GIT_PUSH=( git push --quiet )
            ;;
esac

# shellcheck disable=SC1091
source pathjoin

# NOTE: is it assumed that the system running the script
# is configured to be able to push to the remote forked repo(s)
WEBHOSTED_GIT_ACCOUNT_URL=
PROGRAM_NAME="$(basename "$0")"
TEMP_DIR_NAME="$PROGRAM_NAME-temp"
declare -A FORKED_REPO_NAMES_TO_UPSTREAM_URLS=(
    # ["forked_repo_name"]=>"upstream_url"
)

if [ -z "$(which git)" ]; then
    echo "${PROGRAM_NAME}: git cannot be found on the PATH!"
    exit 1
fi

if [ -d "$TEMP_DIR_NAME" ]; then
    rm --recursive --force "$TEMP_DIR_NAME"
fi

mkdir "$TEMP_DIR_NAME" || exit 1
cd "$TEMP_DIR_NAME" || exit 1

for forked_repo in "${!FORKED_REPO_NAMES_TO_UPSTREAM_URLS[@]}"; do
    # e.g. webhost_url https://github.com
    webhost_url="$(grep --perl-regexp --only-matching '\w+://[ \w\.]+' <<< "${WEBHOSTED_GIT_ACCOUNT_URL}")"
    # e.g. webhost_user_dir /reap2sow1
    webhost_user_dir="$(grep --perl-regexp --only-matching '\w\K/\w+[^?]+' <<< "${WEBHOSTED_GIT_ACCOUNT_URL}")"
    # e.g. forked_repo_dir /reap2sow1/somerepo
    forked_repo_dir="$(pathjoin "${webhost_user_dir}" "${forked_repo}")"
    # e.g. https://github.com/reap2sow1/somerepo
    final_webhost_url="${webhost_url}${forked_repo_dir}"
    "${GIT_CLONE[@]}" "$final_webhost_url" "$forked_repo" > /dev/null
    cd "$forked_repo"
    # seqeuence of commands inspired from:
    # https://stackoverflow.com/questions/379081/track-all-remote-git-branches-as-local-branches/6300386#answer-27234826
    git remote add upstream "${FORKED_REPO_NAMES_TO_UPSTREAM_URLS[$forked_repo]}"
    for short_refname in $(git branch -r | grep -vE "HEAD|master"); do 
        "${GIT_BRANCH[@]}" --track "${short_refname#*/}" "$short_refname"; done
    "${GIT_PUSH[@]}" --all "$final_webhost_url"
    "${GIT_PUSH[@]}" --tags "$final_webhost_url"
    cd ..
done

cd ..
rm --recursive --force "$TEMP_DIR_NAME"

exit 0
